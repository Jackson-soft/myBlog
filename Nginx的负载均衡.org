#+TITLE: Nginx 的负载均衡
** Nginx 的四层负载

开源版的 Nginx 在 1.9.0 版本中加入了大量提升性能的特性，这其中包括了可以用来做 =TCP/UDP= 代理和负载的 =stream= 模块。这个模块的编译参数是 =--with-stream= 。配置示例如下：

#+BEGIN_SRC nginx
worker_processes auto;
error_log /var/log/nginx/error.log info;
events {
    worker_connections  1024;
}
stream {
    upstream backend {
        hash $remote_addr consistent;
        server backend1.example.com:12345 weight=5;
        server 127.0.0.1:12345            max_fails=3 fail_timeout=30s;
        server unix:/tmp/backend3;
    }

    upstream dns {
       server 192.168.0.1:53535;
       server dns.example.com:53;
    }

    server {
        listen 12345;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        proxy_pass backend;
    }

    server {
        listen 127.0.0.1:53 udp;
        proxy_responses 1;
        proxy_timeout 20s;
        proxy_pass dns;
    }

    server {
        listen [::1]:12345;
        proxy_pass unix:/tmp/stream.socket;
    }
}
#+END_SRC

** Nginx 的七层负载

Nginx 的 =HTTP= 负载是目前 =web server= 高可用性中水平扩展最常用到的功能。其配置示例如下：

#+BEGIN_SRC nginx
http {
    upstream backend {
        server backend1.example.com weight=5;
        server backend2.example.com;
        server 192.0.0.1 backup;
    }
    server {
        location / {
            proxy_pass http://backend;
        }
    }
}
#+END_SRC

既然是用来做负载均衡，那负载算法自然是必不可少，下面就来说说 Nginx 提供给我们的几种负载算法：

1. =Round-robin= : 请求被均匀地分布在服务器上，服务器权重被考虑在内，Nginx 的默认负载。
2. =Least Connections(least_conn)= : 请求被发送到具有服务器权重的活动连接数最少的服务器。
3. =IP Hash(ip_hash)= ： 从客户端 IP 地址确定发送请求的服务器。在这种情况下，使用 IPv4 地址的前三个八位字节或整个 IPv6 地址来计算哈希值。该方法保证来自同一地址的请求到达同一台服务器，除非它不可用。
4. =Generic Hash(hash)= ：发送请求的服务器由用户定义的键确定，用户定义的键可以是文本，变量或其组合。例如，密钥可以是源 IP 和端口或 URI。其可选 =consistent= 关键字支持一致性 hash 特性。

*被动健康监测*

当 Nginx 认为服务器不可用时，它暂时停止向该服务器发送请求，直到它再次被视为活动为止。server 指令的以下参数配置条件以考虑服务器不可用：

    该 fail_timeout 参数设置指定次数的尝试失败的时间，并且仍然认为服务器不可用。换句话说，服务器不可用于由此设置的时间间隔 fail_timeout。
    该 max_fails 参数设置在指定时间内应该发生的失败尝试次数，以仍然认为服务器不可用。

默认值为 10 秒，1 次尝试。因此，如果 NGINX 无法向某个服务器发送请求或至少没有从该服务器收到响应，则会立即将服务器不可用 10 秒钟。

#+BEGIN_SRC nginx
upstream backend {
    server backend1.example.com;
    server backend2.example.com max_fails=3 fail_timeout=30s;
    server backend3.example.com max_fails=2;
}
#+END_SRC
