#+TITLE: /Docker Compose/
* 简介
Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然
后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。

Compose 使用的三个步骤：
+ 使用 Dockerfile 定义应用程序的环境。
+ 使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。
+ 最后，执行 docker-compose up 命令来启动并运行整个应用程序。
* 运行
在测试目录中，执行以下命令来启动应用程序：
#+BEGIN_SRC shell
docker-compose up
#+END_SRC

如果你想在后台执行该服务可以加上 -d 参数：
#+BEGIN_SRC shell
docker-compose up -d
#+END_SRC
* yaml 配置指令参考
** version
指定本 yml 依从的 compose 哪个版本制定的。
** build
指定为构建镜像上下文路径：

例如 webapp 服务，指定为从上下文路径 ./dir/Dockerfile 所构建的镜像：
#+BEGIN_SRC yaml
version: "3.7"
services:
  webapp:
    build: ./dir
#+END_SRC

或者，作为具有在上下文指定的路径的对象，以及可选的 Dockerfile 和 args：
#+BEGIN_SRC yaml
version: "3.7"
services:
  webapp:
    build:
      context: ./dir
      dockerfile: Dockerfile-alternate
      args:
        buildno: 1
      labels:
        - "com.example.description=Accounting webapp"
        - "com.example.department=Finance"
        - "com.example.label-with-empty-value"
      target: prod
#+END_SRC

+ context：上下文路径。
+ dockerfile：指定构建镜像的 Dockerfile 文件名。
+ args：添加构建参数，这是只能在构建过程中访问的环境变量。
+ labels：设置构建镜像的标签。
+ target：多层构建，可以指定构建哪一层。
** /cap_add，cap_drop/
添加或删除容器拥有的宿主机的内核功能。
#+BEGIN_SRC yaml
cap_add:
  - ALL # 开启全部权限

cap_drop:
  - SYS_PTRACE # 关闭 ptrace权限
#+END_SRC
** /cgroup_parent/
为容器指定父 cgroup 组，意味着将继承该组的资源限制。
#+BEGIN_SRC yaml
cgroup_parent: m-executor-abcd
#+END_SRC
** command
覆盖容器启动的默认命令。
#+BEGIN_SRC yaml
command: ["bundle", "exec", "thin", "-p", "3000"]
#+END_SRC
** /container_name/
指定自定义容器名称，而不是生成的默认名称。
#+BEGIN_SRC yaml
container_name: my-web-container
#+END_SRC
** /depends_on/
设置依赖关系。
+ docker-compose up ：以依赖性顺序启动服务。在以下示例中，先启动 db 和 redis ，才会启动 web。
+ docker-compose up SERVICE ：自动包含 SERVICE 的依赖项。在以下示例中，docker-compose up web 还将创建并启动 db 和 redis。
+ docker-compose stop ：按依赖关系顺序停止服务。在以下示例中，web 在 db 和 redis 之前停止。

#+BEGIN_SRC yaml
version: "3.7"
services:
  web:
    build: .
    depends_on:
      - db
      - redis
  redis:
    image: redis
  db:
    image: postgres
#+END_SRC

注意：web 服务不会等待 redis db 完全启动 之后才启动。
** devices
指定设备映射列表。
#+BEGIN_SRC yaml
devices:
  - "/dev/ttyUSB0:/dev/ttyUSB0"
#+END_SRC
** dns
自定义 DNS 服务器，可以是单个值或列表的多个值。
#+BEGIN_SRC yaml
dns: 8.8.8.8

dns:
  - 8.8.8.8
  - 9.9.9.9
#+END_SRC
** /dns_search/
自定义 DNS 搜索域。可以是单个值或列表。
#+BEGIN_SRC yaml
dns_search: example.com

dns_search:
  - dc1.example.com
  - dc2.example.com
#+END_SRC
** entrypoint
覆盖容器默认的 entrypoint。
#+BEGIN_SRC yaml
entrypoint: /code/entrypoint.sh
#+END_SRC

也可以是以下格式：
#+BEGIN_SRC yaml
entrypoint:
    - php
    - -d
    - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so
    - -d
    - memory_limit=-1
    - vendor/bin/phpunit
#+END_SRC
** /env_file/
从文件添加环境变量。可以是单个值或列表的多个值。
#+BEGIN_SRC yaml
env_file: .env

env_file:
  - ./common.env
  - ./apps/web.env
  - /opt/secrets.env
#+END_SRC
** environment
添加环境变量。您可以使用数组或字典、任何布尔值，布尔值需要用引号引起来，以确保 YML 解析器不会将其转换为 True 或 False。
#+BEGIN_SRC yaml
environment:
  RACK_ENV: development
  SHOW: 'true'
#+END_SRC
** expose
暴露端口，但不映射到宿主机，只被连接的服务访问。

仅可以指定内部端口为参数：
#+BEGIN_SRC yaml
expose:
 - "3000"
 - "8000"
#+END_SRC
** /extra_hosts/
添加主机名映射。类似 docker client --add-host。
#+BEGIN_SRC yaml
extra_hosts:
 - "somehost:162.242.195.82"
 - "otherhost:50.31.209.229"
#+END_SRC

以上会在此服务的内部容器中 /etc/hosts 创建一个具有 ip 地址和主机名的映射关系：
#+BEGIN_SRC text
162.242.195.82  somehost
50.31.209.229   otherhost
#+END_SRC
** healthcheck
用于检测 docker 服务是否健康运行。
#+BEGIN_SRC yaml
healthcheck:
  test: ["CMD", "curl", "-f", "http://localhost"] # 设置检测程序
  interval: 1m30s # 设置检测间隔
  timeout: 10s # 设置检测超时时间
  retries: 3 # 设置重试次数
  start_period: 40s # 启动后，多少秒开始启动检测程序
#+END_SRC
** image
指定容器运行的镜像。以下格式都可以：
#+BEGIN_SRC yaml
image: redis
image: ubuntu:14.04
image: tutum/influxdb
image: example-registry.com:4000/postgresql
image: a4bc65fd # 镜像id
#+END_SRC
** logging
服务的日志记录配置。

driver：指定服务容器的日志记录驱动程序，默认值为json-file。有以下三个选项
#+BEGIN_SRC yaml
driver: "json-file"
driver: "syslog"
driver: "none
#+END_SRC

/json-file/ :
#+BEGIN_SRC yaml
logging:
  driver: json-file
  options:
    max-size: "200k" # 单个文件大小为200k
    max-file: "10" # 最多10个文件
#+END_SRC

/syslog/ :
#+BEGIN_SRC yaml
logging:
  driver: syslog
  options:
    syslog-address: "tcp://192.168.0.42:123"
#+END_SRC
** /network_mode/
设置网络模式。
#+BEGIN_SRC yaml
network_mode: "bridge"
network_mode: "host"
network_mode: "none"
network_mode: "service:[service name]"
network_mode: "container:[container name/id]"
#+END_SRC
** networks
配置容器连接的网络，引用顶级 networks 下的条目 。
#+BEGIN_SRC yaml
services:
  some-service:
    networks:
      some-network:
        aliases:
         - alias1
      other-network:
        aliases:
         - alias2
networks:
  some-network:
    # Use a custom driver
    driver: custom-driver-1
  other-network:
    # Use a custom driver which takes special options
    driver: custom-driver-2
#+END_SRC

aliases ：同一网络上的其他容器可以使用服务名称或此别名来连接到对应容器的服务。
** restart
+ no：是默认的重启策略，在任何情况下都不会重启容器。
+ always：容器总是重新启动。
+ on-failure：在容器非正常退出时（退出状态非0），才会重启容器。
+ unless-stopped：在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器
#+BEGIN_SRC yaml
restart: "no"
restart: always
restart: on-failure
restart: unless-stopped
#+END_SRC

注：swarm 集群模式，请改用 /restart_policy/ 。
** secrets
存储敏感数据，例如密码：
#+BEGIN_SRC yaml
version: "3.1"
services:

mysql:
  image: mysql
  environment:
    MYSQL_ROOT_PASSWORD_FILE: /run/secrets/my_secret
  secrets:
    - my_secret

secrets:
  my_secret:
    file: ./my_secret.txt
#+END_SRC
** sysctls
设置容器中的内核参数，可以使用数组或字典格式。
#+BEGIN_SRC yaml
sysctls:
  net.core.somaxconn: 1024
  net.ipv4.tcp_syncookies: 0

sysctls:
  - net.core.somaxconn=1024
  - net.ipv4.tcp_syncookies=0
#+END_SRC
** tmpfs
在容器内安装一个临时文件系统。可以是单个值或列表的多个值。
#+BEGIN_SRC yaml
tmpfs: /run

tmpfs:
  - /run
  - /tmp
#+END_SRC
** ulimits
覆盖容器默认的 ulimit。
#+BEGIN_SRC yaml
ulimits:
  nproc: 65535
  nofile:
    soft: 20000
    hard: 40000
#+END_SRC
** volumes
将主机的数据卷或着文件挂载到容器里。
#+BEGIN_SRC yaml
version: "3.7"
services:
  db:
    image: postgres:latest
    volumes:
      - "/localhost/postgres.sock:/var/run/postgres/postgres.sock"
      - "/localhost/data:/var/lib/postgresql/data"
#+END_SRC
* 文档
[[https://docs.docker.com/compose/compose-file/][Compose file version 3 reference | Docker Documentation]]
