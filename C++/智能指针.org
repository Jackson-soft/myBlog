#+TITLE: /Modern C++/ 智能指针

** /unique_ptr/
/std::unique_ptr/ 是一个具有开销小，速度快， /move-only/ 特定的智能指针，使用独占拥有方式来管理资源。

/std::unique_ptr/ 的使用场景是，你使用了 /C-like API/ 来返回一个指向堆内分配的数组的原生指针，而且你像对之接管拥有权。

默认情况下，释放资源由 /delete/ 来完成，也可以指定自定义的析构函数来替代。但是具有丰富状态的 /deleters/ 和以函数指针作为 /deleters/ 增大了 /std::unique_ptr/ 的存储开销

你可以轻易且有效的将一个 /std::unique_ptr/ 转化为 /std::shared_ptr/ 。

#+BEGIN_SRC C++
std::unique_ptr<int> p1(new int(5));
std::unique_ptr<int> p2 = p1; // 编译会出错
std::unique_ptr<int> p3 = std::move (p1); // 转移所有权，现在那块内存归 p3 所有, p1 成为无效的指针。

p3.reset(); //释放内存。
p1.reset(); //实际上什么都没做。
#+END_SRC

** /shared_ptr/ 和 /weak_ptr/

基于 /Boost/ 库, /C++11/ 加入了 /shared_ptr/ 和 /weak_ptr/ 。它们最早在 /TR1/ 中就被引入，但在 /C++11/ 中，在 /Boost/ 的基础上又加入了新的功能。

/std::shared_ptr/ 使用引用计数。每一个 /shared_ptr/ 的拷贝都指向相同的内存。在最后一个 /shared_ptr/ 析构的时候，内存才会被释放。

/std::shared_ptr/ 为了管理任意资源的共享式内存管理提供了自动垃圾回收的便利。

/std::shared_ptr/ 是 /std::unique_ptr/ 的两倍大，除了控制块，还有需要原子引用计数操作引起的开销。

在使用的时候应该避免从原生指针类型变量创建 /std::shared_ptr/ 。

#+BEGIN_SRC C++
std::shared_ptr<int> p1(new int(5));
std::shared_ptr<int> p2 = p1; // 都指向同一内存。

p1.reset(); // 因为 p2 还在，所以内存没有释放。
p2.reset(); // 释放内存，因为没有 shared_ptr 指向那块内存了。
#+END_SRC

/std::shared_ptr/ 使用引用计数，所以有循环计数的问题。为了打破循环，可以使用 /std::weak_ptr/ 。顾名思义, /weak_ptr/ 是一个弱引用，只引用，不计数。如果一块内
存被 /shared_ptr/ 和 /weak_ptr/ 同时引用，当所有 /shared_ptr/ 析构了之后，不管还有没有 /weak_ptr/ 引用该内存，内存也会被释放。所以 /std::weak_ptr/ 不保证它指向的内存一定
是有效的，在使用之前需要检查。

潜在的使用 /std::weak_ptr/ 的场景包括缓存，观察者列表，以及阻止 /std::shared_ptr/ 形成的环。

#+BEGIN_SRC C++
std::shared_ptr<int> p1(new int(5));
std::weak_ptr<int> wp1 = p1; // 还是只有 p1 有所有权。

{
  std::shared_ptr<int> p2 = wp1.lock(); // p1 和 p2 都有所有权
  if (p2) // 使用前需要检查
  {
    // 使用 p2
  }
} // p2 析构了，现在只有 p1 有所有权。

p1.reset(); // 内存被释放。

std::shared_ptr<int> p3 = wp1.lock(); // 因为内存已经被释放了，所以得到的是空指针。
if（p3）
{
  // 不会执行到这。
}
#+END_SRC
