#+TITLE: 动态内存管理
* 说明
动态内存管理的主要是堆内存。
* ~C~ 语言的包装
在 ~C~ 语言中用于内存管理的函数主要定义于头文件 ~<stdlib.h>~ 中。而 ~C++~ 封装对应的头文件是 ~<cstdlib>~ 。

这里主要说一下，不管是分配还是释放函数都是线程安全的。

分配函数成功时，返回指向新分配内存起始的指针。失败时，返回空指针。所以可以通过判断返回值是否是 ~std::nullptr_t~ 。
** ~malloc~ 分配未初始化内存
函数体：
#+begin_src c++
void* malloc( std::size_t size );
#+end_src
** ~aligned_alloc~ (since C++17) 分配内存对齐的指针
#+begin_src c++
void* aligned_alloc( std::size_t alignment, std::size_t size );
#+end_src
** ~calloc~ 分配内存并初始化所有位为零
#+begin_src c++
void* calloc( std::size_t num, std::size_t size );
#+end_src
** ~realloc~ 重分配给定的内存区域
它必须是 std::malloc() 、 std::calloc() 或 std::realloc() 先前分配的，且仍未被 std::free() 释放，否则行为未定义。

#+begin_src c++
void* realloc( void* ptr, std::size_t new_size );
#+end_src

*说明* : 重新分配可能会涉及到按位复制，所以只有符合 ~TriviallyCopyable~ 的类型才能在调用 ~std::realloc~ 后安全访问。
** ~free~ 释放内存
#+begin_src c++
void free( void* ptr );
#+end_src
* ~C++~
** ~new~ 表达式
~C++~ 中使用 ~new~ 和 ~delete~ 从堆中分配和释放内存， ~new~ 和 ~delete~ 是运算符，不是函数。

语法：
#+begin_src c++
::(optional) new (placement_params)(optional) ( type ) initializer(optional)

::(optional) new (placement_params)(optional) type initializer(optional)
#+end_src

执行过程：
1. 调用 ~operator new~ 分配内存；
2. 调用构造函数生成类对象；
3. 返回相应指针。

** ~new~ 操作符
~operator new~ （或 ~operator new[]~ ）：是一个标准库函数，可以重载，定义于头文件 ~<new>~ 中。
*** 全局重载
函数体：
#+begin_src c++
void* operator new  ( std::size_t count );
void* operator new  ( std::size_t count, std::align_val_t al );
#+end_src
*** 类重载
函数体：
#+begin_src c++
void* T::operator new  ( std::size_t count );
#+end_src
** ~placement new~
重载下面的 ~operator new~ 版本：
#+begin_src c++
void* operator new  ( std::size_t count, void* ptr );
void* operator new[]( std::size_t count, void* ptr );
#+end_src

~palcement new~ 的主要用途就是反复使用一块较大的动态分配的内存来构造不同类型的对象或者他们的数组。

~placement new~ 构造起来的对象或其数组，要显示的调用他们的析构函数来销毁，千万不要使用 ~delete~ 。

语法：
#+begin_src c++
new ( expression-list ) new-type-id ( optional-initializer-expression-list )
#+end_src

#+begin_src c++
#include <new>

void someCode()
{
    char* ptr = new(std::nothrow) char[sizeof(T)]; // allocate memory
    if (ptr == nullptr) {
        return;
    }
    T* tptr = new(ptr) T;            // construct in allocated storage ("place")
    tptr->~T();                      // destruct
    delete[] ptr;                    // deallocate memory
}
#+end_src

*注意* ： 这里构建的类型可以是不同的，且不用担心会分配失败，只需注意重新放置的空间占用要小于原空间，以防未定义行为出现。
* 文档
- [[https://en.cppreference.com/w/cpp/memory/c][C memory management library - cppreference.com]]
- [[https://en.cppreference.com/w/cpp/memory/new][Low level memory management - cppreference.com]]
