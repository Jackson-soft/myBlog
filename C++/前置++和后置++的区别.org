#+TITLE: 前置++和后置++的区别
* 基本
** 基本区别
前置++是先自加再使用，而后置++是先使用再自加！

即：前加加就是先加，然后才用这个变量；后加加就是先用这个变量，然后在对这个变量做自增。

例如：
#+begin_src c++
int i=10;
i++;//此时，i++整体为10，然后i增加1，变为11

int i=10;
++i;//此时，i增加1，变为11，++i整体为11
#+end_src

从汇编角度来说：
+ a++ 表示取a的地址，把它的值装入寄存器，然后增加内存中a的值；
+ 而++a 表示取a地址，增加它的内容，然后把值放在寄存器中
** 表达式使用的区别
其实++i相当于下面的代码：
#+begin_src c++
i += 1;
return i;
#+end_src

而i++则相当于下面的代码：
#+begin_src c++
j = i;
i += 1;
return j;
#+end_src

其实最主要的区别就是：
+ 前置的++为了可以连续运算，所以会返回对象的引用；
+ 后置的++返回的是 ~const~ 的临时对象。

所以：

对于内建数据类型，其实前置++和后置++的效率相差不大，而对于自定义的数据类型，前置++返回对象的引用，

而后置++则返回对象的值，所以导致在大对象的时候产生了较大的复制开销，引起效率降低。

优先级上，后置大于前置大于解引用，在使用迭代器时，可以写为 ~*iter++~ ，表示取得 ~iter~ 当前位置的值，然后把 ~iter+1~ 。
* 运算符重载
/C++/ 规定的运算符重载格式：
+ 前置运算符作为一元运算符重载，重载为成员函数的格式如下：
#+begin_src c++
T & operator++(); // 前置自增运算符的重载函数，函数参数是空
#+end_src

+ 后置运算符作为二元运算符重载，多写一个没用的参数，重载为成员函数的个数如下：
#+begin_src c++
T operator++(int); // 后置自增运算符的重载函数，多一个没用的参数
#+end_src

最终版本如下：
#+begin_src c++
struct X
{
    // prefix increment
    X& operator++()
    {
        // actual increment takes place here
        return *this; // return new value by reference
    }

    // postfix increment
    X operator++(int)
    {
        X old = *this; // copy old value
        operator++();  // prefix increment
        return old;    // return old value
    }

    // prefix decrement
    X& operator--()
    {
        // actual decrement takes place here
        return *this; // return new value by reference
    }

    // postfix decrement
    X operator--(int)
    {
        X old = *this; // copy old value
        operator--();  // prefix decrement
        return old;    // return old value
    }
};
#+end_src
