#+TITLE: 前置++和后置++的区别
* 基本
其实++i相当于下面的代码：
#+begin_src c++
i += 1;
return i;
#+end_src

而i++则相当于下面的代码：
#+begin_src c++
j = i;
i += 1;
return j;
#+end_src

其实最主要的区别就是：
+ 前置的++为了可以连续运算，所以会返回对象的引用；
+ 后置的++返回的是 /const/ 的临时对象。

所以：

对于内建数据类型，其实前置++和后置++的效率相差不大，而对于自定义的数据类型，前置++返回对象的引用，

而后置++则返回对象的值，所以导致在大对象的时候产生了较大的复制开销，引起效率降低。
* 运算符重载
/C++/ 规定的运算符重载格式：
+ 前置运算符作为一元运算符重载，重载为成员函数的格式如下：
#+begin_src c++
T & operator++(); // 前置自增运算符的重载函数，函数参数是空
#+end_src

+ 后置运算符作为二元运算符重载，多写一个没用的参数，重载为成员函数的个数如下：
#+begin_src c++
T operator++(int); // 后置自增运算符的重载函数，多一个没用的参数
#+end_src
