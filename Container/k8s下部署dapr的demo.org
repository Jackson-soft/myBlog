#+TITLE: =k8s= 下部署 =dapr= 的 =demo=
* =dapr= 的示例
#+begin_src go
package main

import (
	"context"
	"log"
	"net/http"

	"github.com/dapr/go-sdk/service/common"
	daprd "github.com/dapr/go-sdk/service/http"
)

func main() {
	s := daprd.NewService(":8090")

	if err := s.AddServiceInvocationHandler("/echo", echoHandler); err != nil {
		log.Fatalf("error adding invocation handler: %v", err)
	}

	if err = s.Start(); err != nil && err != http.ErrServerClosed {
		log.Fatalln(err)
	}
}

func echoHandler(ctx context.Context, in *common.InvocationEvent) (out *common.Content, err error) {
	log.Printf("echo - ContentType:%s, Verb:%s, QueryString:%s, %+v", in.ContentType, in.Verb, in.QueryString, string(in.Data))
	// do something with the invocation here
	out = &common.Content{
		Data:        []byte("hi echo"),
		ContentType: in.ContentType,
		DataTypeURL: in.DataTypeURL,
	}
	return
}
#+end_src
* 部署
我这里主要是为了方便测试，使用 =k8s= 的 =NodePort= 方式对外暴露端口，正式部署时则不必如此。

部署脚本：
#+begin_src yaml
apiVersion: v1
kind: Service
metadata:
    name: godemo
    labels:
        app: golang
spec:
    selector:
        app: golang
    ports:
        - protocol: TCP
          port: 80
          targetPort: 8090
          nodePort: 30001  # 这里对外暴露的端口
    type: NodePort

---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: godemo
    labels:
        app: golang
spec:
    replicas: 1
    selector:
        matchLabels:
            app: golang
    template:
        metadata:
            labels:
                app: golang
            annotations:
                dapr.io/enabled: "true"  # 这里是把 dapr runtime 以 sidecar 方式注入到pod
                dapr.io/app-id: "godemo"
                dapr.io/app-port: "8090"
        spec:
            containers:
                - name: golang
                  image: runtime/go-demo:latest
                  ports:
                      - containerPort: 8090
                  imagePullPolicy: IfNotPresent  # 这里是让 k8s 使用本地编译的镜像

#+end_src

测试脚本：
#+begin_src restclient
GET http://127.0.0.1:30001/echo
#+end_src

#+RESULTS:
#+BEGIN_SRC text
hi echo
GET http://127.0.0.1:30001/echo
HTTP/1.1 200 OK
Date: Mon, 27 Sep 2021 10:08:20 GMT
Content-Length: 7
Content-Type: text/plain; charset=utf-8
Request duration: 0.003595s
#+END_SRC

* 文档
- [[https://kubernetes.io/docs/concepts/services-networking/service/#nodeport][Service]]
