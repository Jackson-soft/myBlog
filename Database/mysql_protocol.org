#+TITLE: ~Mysql Protocol~ 分析
* 说明
本文是基于 ~mysql 8.0~ 以上协议。
* 流程
** 数据包
*说明* :
- 数据包最大上限是 ~16M~
- 数据包序列号（ ~Sequence ID~ ）的规则是：每个新命令包以 0 开始，然后重置为 0 。

包体载荷如下：

| 类型        | 名称           | 说明       |
|-------------+----------------+------------|
| int<3>      | ~payload_length~ | 包的长度   |
|-------------+----------------+------------|
| int<1>      | ~sequence_id~    | 包体序列号 |
|-------------+----------------+------------|
| string<var> | ~payload~        | 包的实际载荷     |
** 交互流程
=MySQL= 的通信协议连接阶段主要流程如下（薅自官网：[[https://dev.mysql.com/doc/internals/en/connection-phase.html][Connection Phase]] ）:
#+begin_src dot :file connection_phase.png :cmdline -Kdot -Tpng
digraph connection_phase {
AUTH_CHALLENGE [ label = "Initial Handshake Packet" ];
AUTH_CHALLENGE  -> CLIENT_RESPONSE;
AUTH_CHALLENGE  -> SSL_HANDSHAKE;

SSL_HANDSHAKE [ label = "SSL Exchange" ];
SSL_HANDSHAKE     -> CLIENT_RESPONSE;

CLIENT_RESPONSE [ label = "Client Response" ];
CLIENT_RESPONSE -> AUTH_METHOD_SWITCH;
CLIENT_RESPONSE -> AUTHENTICATION_EXCHANGE;
CLIENT_RESPONSE -> CONNECTION_DENIED [ label = "insufficient client \n capabilities" ];

AUTH_METHOD_SWITCH [ label = "Authentication method \n switch" ];
AUTH_METHOD_SWITCH -> AUTHENTICATION_EXCHANGE -> COMMAND_PHASE;
AUTH_METHOD_SWITCH -> NOT_SUPPORTED [ label = "client does not know \n requested auth method" ];

AUTHENTICATION_EXCHANGE [ label = "Authentication exchange \n continuation" ];
AUTHENTICATION_EXCHANGE -> CONNECTION_DENIED;

COMMAND_PHASE     [ shape = "box", label = "OK" ];
CONNECTION_DENIED [ shape = "box", label = "ERR" ];
NOT_SUPPORTED     [ shape = "box", label = "DISCONNECT" ];
}
#+end_src
* 公共数据包
** OK
** ERROR
** EOF
* 协议
** 说明
客户端的命令报文的消息体如下：
#+begin_src text
1 byte     命令标识符
n bytes    参数
#+end_src

*命令标识符* : 标识当前请求消息的类型 (协议枚举在 ~include/my_command.h~ )
*参数* : 参数是可选项
** 登录过程
*** 说明
其实客户端登录服务端本来是没什么可说的，但 ~mysql 8.0~ 后添加了对 ~caching_sha2_password~ 插件的支持。再加上对低版本的兼容，让整个过程变的比较麻烦。
参照这篇文章 [[https://insidemysql.com/preparing-your-community-connector-for-mysql-8-part-2-sha256/][Preparing your Community Connector for MySQL 8 – part 2 – SHA256]]
*** 流程
1. 客户端连上服务端后，服务端首先给客户端发送包含各种信息的 [[https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::HandshakeV10][Protocol::HandshakeV10]] 包；
2. 客户端回复服务端登录响应包 [[https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::HandshakeResponse41][Protocol::HandshakeResponse41]] ，包含用户名密码等等登录相关信息和 ~auth plugin name~ ；
3. 服务端给客户端下发 [[https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::AuthSwitchRequest][Protocol::AuthSwitchRequest]] ，包含 ~plugin name~ 和密钥 ~auth plugin data~ ;

   这里有就两种情况，主要是客户端在发送登录响应包的时候的 ~auth plugin name~ 的值不同：
   - ~mysql_native_password~ :: 包体中会包含要切换到新的 ~plugin name~ 和新的密钥 ~auth plugin data~ 。
   - ~caching_sha2_password~ :: 包体将变成 [[https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::AuthMoreData][Protocol::AuthMoreData]] ，
     这个数据只有一个字节，内容是3或4；如果是3，则意味着接下来的包是 ~OK~ 包。如果是4，则意味着要做完全身份验证。
4. 客户端发送加密后的登录密码包 [[https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::AuthSwitchResponse][Protocol::AuthSwitchResponse]] 。
5. 服务端下发登录结果包，成功则 ~OK~ ，失败则 ~ERROR~ 。
*** 完全身份验证
当服务器缓存不包含密码哈希时，服务器要求输入完整的密码，以便填充缓存。这可以通过两种方式之一完成：
- 如果使用 ~SSL/TLS~ 连接已经是安全的，则以纯文本传递它。
- 如果连接不安全，则使用服务器公钥加密它。

完整流程如下：
#+begin_src go
func encryptPassword(password string, seed []byte, pub *rsa.PublicKey) ([]byte, error) {
	plain := make([]byte, len(password)+1)
	copy(plain, password)
	for i := range plain {
		j := i % len(seed)
		plain[i] ^= seed[j]
	}
	sha1 := sha1.New()
	return rsa.EncryptOAEP(sha1, rand.Reader, pub, plain, nil)
}

// 处理认证过程
func (p *PacketIO) HandleAuthResult(password, plugin string) error {
	authData, newPlugin, err := p.readAuthResult()
	if err != nil {
		return err
	}

	if len(newPlugin) != 0 {
		plugin = newPlugin

		if len(authData) != 0 {
			p.salt_ = authData
		}

		authResp, err := p.Auth(password, plugin)
		if err != nil {
			return err
		}

		if err = p.WriteAuthSwitchResponse(authResp); err != nil {
			return err
		}

		authData, newPlugin, err = p.readAuthResult()
		if err != nil {
			return err
		}
		if len(newPlugin) != 0 {
			return ErrMalformPacket
		}
	}
	// https://insidemysql.com/preparing-your-community-connector-for-mysql-8-part-2-sha256/
	switch plugin {
	case CachingSha2Password:
		switch len(authData) {
		case 0:
			return nil
		case 1:
			switch authData[0] {
			case 3:
				_, err := p.ReadOK()
				return err
			case 4:
				// 这里需要用服务器密钥加密密码后发送
				data := make([]byte, packetHeaderSize+1)
				data[packetHeaderSize] = 2
				if err := p.WritePacket(data); err != nil {
					return err
				}

				keyData, err := p.ReadPacket()
				if err != nil {
					return err
				}

				block, rest := pem.Decode(keyData[1:])

				if block == nil {
					return fmt.Errorf("No Pem data found, data: %s", rest)
				}
				pkix, err := x509.ParsePKIXPublicKey(block.Bytes)
				if err != nil {
					return err
				}
				pubKey := pkix.(*rsa.PublicKey)

				authResp, err := encryptPassword(password, p.salt_, pubKey)
				if err != nil {
					return err
				}

				if err = p.WriteAuthSwitchResponse(authResp); err != nil {
					return err
				}

				_, err = p.ReadOK()
				return err
			}
		default:
			return ErrMalformPacket
		}
	default:
		return nil
	}

	return nil
}
#+end_src
** 文本协议 （ [[https://dev.mysql.com/doc/internals/en/text-protocol.html][Text Protocol]] ）
*** 说明
目前在 ~mysql 8.0~ 中有部分命令是废弃掉的（可以参照头文件 ~include/my_command.h~ 中的命令枚举）。

包括如下几个命令：
- ~COM_CREATE_DB~
- ~COM_DROP_DB~
- ~COM_CONNECT~
- ~COM_TIME~
- ~COM_DAEMON~
*** 查询
[[https://dev.mysql.com/doc/internals/en/com-query.html][COM_QUERY]] 是客户端发送给服务端立即执行的文本查询语句。

包体：
#+begin_src text
1              [03] COM_QUERY
string[EOF]    the query the server shall execute
#+end_src

[[https://dev.mysql.com/doc/internals/en/com-query-response.html#packet-COM_QUERY_Response][COM_QUERY Response]] 是服务端返回给客户端的查询结果集。

** 预处理语句 （ [[https://dev.mysql.com/doc/internals/en/prepared-statements.html][Prepared Statements]] ）
*** ~NULL-Bitmap~
在预处理语句中最重要的概念就是 [[https://dev.mysql.com/doc/internals/en/null-bitmap.html][NULL-Bitmap]] 。主要是用于二进制协议中标识 ~NULL~ 数据列。
*** 二进制行数据 （ [[https://dev.mysql.com/doc/internals/en/binary-protocol-resultset-row.html][Binary Protocol Resultset Row]] ）

包体：
#+begin_src text
1              packet header [00]
string[$len]   NULL-bitmap, length: (column-count + 7 + 2) / 8
string[$len]   values
#+end_src

* 文档
- [[https://dev.mysql.com/doc/internals/en/connection-phase.html][Connection Phase]]
- [[https://dev.mysql.com/doc/internals/en/client-server-protocol.html][MySQL :: MySQL Internals Manual :: 14 MySQL Client/Server Protocol]]
