#+TITLE: /git/ 操作
* 说明
对日常一些 /git/ 操作的命令记录，以备不时之需。
* 文件排除
一般忽略某一些文件时可以在项目根目录添加 /.gitignore/ 文件做排除。
添加文件时排除一个或几个不需要上传的文件：
#+BEGIN_SRC shell
git add --all -- ":!path/to/file1 :!path/to/file2 :!path/to/folder1/*"
#+END_SRC
* 暂存修改代码
** 暂存
#+BEGIN_SRC shell
git stash
#+END_SRC
** 恢复暂存代码
#+BEGIN_SRC shell
git stash pop
#+END_SRC
* 同步 /fork/ 仓库
** 添加远程同步仓库
命令格式：

~git remote add [-t <branch>] [-m <master>] [-f] [--[no-]tags] [--mirror=<fetch|push>] <name> <url>~

示例：

#+BEGIN_SRC shell
git remote add upstream https://github.com/qicosmos/cinatra.git
#+END_SRC
** 同步 /fork/ 仓库
#+begin_src shell
git fetch upstream
#+end_src
** 合并
#+begin_src shell
git merge upstream/master
#+end_src
* 更改远程仓库的 /URL/
** 查看仓库现有的远程 /URL/
#+begin_src shell
git remote -v
#+end_src
** 修改
命令格式：

~git remote set-url [--push] <name> <newurl> [<oldurl>]~

示例：

#+begin_src shell
git remote set-url origin https://github.com/USERNAME/REPOSITORY.git
#+end_src
* 子模块（ ~submodule~ ）
** 修改子模块的仓库链接
命令格式：

~git submodule set-url [--] <path> <newurl>~

示例：

#+begin_src shell
git submodule set-url third_party/uranus https://github.com/Jackson-soft/uranus.git
#+end_src
** 删除子模块
   ~git submodule deinit~ 命令卸载一个子模块。这个命令如果添加上参数 ~--force~ ，则子模块工作区内即使有本地的修改，也会被移除。

删除一个子模块的命令组合：

#+begin_src shell
git submodule deinit project-sub-1
git rm project-sub-1
#+end_src

执行 ~git submodule deinit project-sub-1~ 命令的实际效果，是自动在 ~.git/config~ 中删除了以下内容：

#+begin_src conf
[submodule "project-sub-1"]
url = https://github.com/username/project-sub-1.git
#+end_src

执行 ~git rm project-sub-1~ 的效果，是移除了 ~project-sub-1~ 文件夹，并自动在 ~.gitmodules~ 中删除了以下内容：

#+begin_src conf
[submodule "project-sub-1"]
path = project-sub-1
url = https://github.com/username/project-sub-1.git
#+end_src

此时，主项目中关于子模块的信息基本已经删除（虽然貌似 ~.git/modules~ 目录下还有残余）

* 重置当前 ~HEAD~ 到指定的状态
命令格式：

~git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]~

~git reset [<mode>] [<commit>]~ 说明：
该命令是把当前的分支的 ~head~ 重置到指定的 ~commit~ ，并根据 ~mode~ 更新索引和工作树。如果省略 ~<mode>~ ，则默认为 ~--mixed~ 。 ~mode~ 则是下面其中之一：

+ ~--soft~ :: 完全不碰索引文件或工作树（但将头部重置为`<commit>`，就像所有模式一样）。
+ ~--mixed~ :: 重置索引，但不重置工作树（即保留已修改的文件，但不标记为提交）并报告未更新的内容。
+ ~--hard~ :: 删除工作空间的代码改动，撤销 ~commit~ 且撤销 ~add~ 。
+ ~--merge~ :: 重置索引并更新工作树中在`<commit>和`HEAD`之间不同的文件，但保留那些在索引和工作树之间不同的文件（即那些有未被添加的修改）。 如果一个在<commit>`和索引之间不同的文件有未分阶段的变化，重置将被中止。
+ ~--keep~ :: 重置索引项并更新工作树中`<commit>和`HEAD`之间不同的文件。 如果一个在<commit>`和`HEAD`之间不同的文件有本地修改，重置将被中止。
+ ~--[no-]recurse-submodules~ :: 当工作树被更新时，使用 --recurse-submodules 也将根据超级项目中记录的提交，递归地重置所有活动的子模块的工作树，同时也将子模块的 HEAD 设置为在该提交中被分离。


* 修改 ~commit~

#+begin_src shell
git commit --amend
#+end_src

这时候会进入vim编辑器，修改完后保存即可。

* 文档
+ [[https://www.bookstack.cn/read/git-doc-zh/README.md][Git 中文参考 - 《Git 中文参考》 - 书栈网 · BookStack]]
+ [[https://docs.github.com/cn/github/using-git][使用 Git - GitHub Docs]]
+ [[https://git-scm.com/docs/][Git - Reference]]
