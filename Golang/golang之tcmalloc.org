#+TITLE: Go的内存分配

** 说明
内存分配与 /GC/ （垃圾回收）关系密切，所以了解 /GC/ 前有必要了解内存分配的原理。
** 内存对齐
*** 概念
计算机中内存大小的基本单位是字节（byte），理论上来讲，可以从任意地址访问某种基本数据类型，但是实际上，计算机并非逐字节大小读写内存，而是以2,4,或8的倍数的字节块来读写内存，
如此一来就会对基本数据类型的合法地址作出一些限制，即它的地址必须是2，4或8的倍数。那么就要求各种数据类型按照一定的规则在空间上排列，这就是对齐。
*** 对齐系数
每个字段在内存中的偏移量是对齐系数的倍数即可。

在 /C++/ 中可以通过 /#pragma pack(n)/ 来设置内存对齐系数。一般编译器在 /AMD64/ 系统下默认是8。（为什么是8？是因为64位 /CPU/ 的内存读取粒度是64bit，8byte刚好能满足
64位 /CPU/ 的一次读取，所以出于性能考虑编译器一般会默认以 /CPU/ 的位数作为内存对齐标准。）

*** 合理的字段顺序可以减少内存的开销

内存对齐会影响 /struct/ 的内存占用大小。

内存对齐的规则：
+ 对于具体类型来说，对齐值=min(编译器默认对齐值，类型大小Sizeof长度)。也就是在默认设置的对齐值和类型的内存占用大小之间，取最小值为该类型的对齐值。
我的电脑默认是8，所以最大值不会超过8.
+ struct在每个字段都内存对齐之后，其本身也要进行对齐，对齐值=min(默认对齐值，字段最大类型长度)。这条也很好理解，struct的所有字段中，最大的那个类
型的长度以及默认对齐值之间，取最小的那个。
** 架构


** 接口
