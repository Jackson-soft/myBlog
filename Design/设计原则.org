#+TITLE: 设计原则
* 说明
面向对象设计的六大原则，记录一下，以备以后翻阅。
* 单一职责原则（Single Responsibility Principle，简称SRP）
** 定义
/A class should have a single responsibility, where a responsibility is nothing but a reason to change./

即：一个类只允许有一个职责，即只有一个导致该类变更的原因。
** 释意
+ 类职责的变化往往就是导致类变化的原因：也就是说如果一个类具有多种职责，就会有多种导致这个类变化的原因，从而导致这个类的维护变得困难。
+ 如果我们发现当前类的职责不仅仅有一个，就应该将本来不属于该类真正的职责分离出去。
+ 不仅仅是类，函数（方法）也要遵循单一职责原则，即：一个函数（方法）只做一件事情。如果发现一个函数（方法）里面有不同的任务，则需要将不同的任务以另一个函数（方法）的形式分离出去。
* 里氏替换原则（Liskov Substitution Principle,简称LSP）
** 定义
In a computer program, if S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e. an
object of type T may be substituted with any object of a subtype S) without altering any of the desirable properties of
the program (correctness, task performed, etc.)

即：所有引用基类的地方必须能透明地使用其子类的对象，也就是说子类对象可以替换其父类对象，而程序执行效果不变。
** 释意
+ 在继承体系中，子类中可以增加自己特有的方法，也可以实现父类的抽象方法，但是不能重写父类的非抽象方法，否则该继承关系就不是一个正确的继承关系。
+ 在使用基类的的地方可以任意使用其子类，能保证子类完美替换基类。反之，父类则未必能胜任。
* 依赖倒置原则（Dependence Inversion Principle,简称DIP）
** 定义
+ Depend upon Abstractions. Do not depend upon concretions.
+ Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.
+ High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g. interfaces).

即：
+ 依赖抽象，而不是依赖实现。
+ 抽象不应该依赖细节；细节应该依赖抽象。
+ 高层模块不能依赖低层模块，二者都应该依赖抽象。
** 释意
+ 针对接口编程，而不是针对实现编程。
+ 尽量不要从具体的类派生，而是以继承抽象类或实现接口来实现。
+ 关于高层模块与低层模块的划分可以按照决策能力的高低进行划分。业务层自然就处于上层模块，逻辑层和数据层自然就归类为底层。
* 接口隔离原则（Interface Segregation Principle,简称ISP）
** 定义
/The dependency of one class to another one should depend on the smallest possible interface./

即：使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。
** 释意
+ 类间的依赖关系应该建立在最小的接口上。
+ 不要对外暴露没有实际意义的接口。也就是说，尽量保证接口的实用性。
* 迪米特法则（Law of Demeter,简称LoD）
** 定义
/You only ask for objects which you directly need./

即：一个对象应该对尽可能少的对象有接触，也就是只接触那些真正需要接触的对象。
** 释意
+ 迪米特法则也叫做最少知道原则（Least Know Principle）， 一个类应该只和它的成员变量，方法的输入，返回参数中的类作交流，而不应该引入其他的类（间接交流）。
+ 低耦合、高内聚。
* 开放封闭原则（Open Close Principle,简称OCP）
** 定义
/Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification./

即：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。
** 释意
+ 用抽象构建框架，用实现扩展细节。
+ 不以改动原有类的方式来实现新需求，而是应该以实现事先抽象出来的接口（或具体类继承抽象类）的方式来实现。
