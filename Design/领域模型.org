#+TITLE: 领域模型
* 基本概念
  + 贫血模型：像我们平时普通开发那样，Service 是业务逻辑，处理传递进来的 BO（Business Object）业务对象或则参数对象，对于 BO 来说，BO 是贫血模型，数据和业务逻辑被分割到不同的类中；
  + 充血模型：相反的，数据和对应的业务逻辑被封装到同一个类中。
* 基本的目录结构体系
  #+begin_src text
- application    // 应用层
| - assembler      // 用于Entity和DTO转换
| - dto              // 存放DTO对象，DTO作为service的入参
| - - command        // 命令入参，如：add、update、edit、delete
| - - event          // 事件入参，如：addEvent、updateEvent
| - - query          // 查询入参，如：detailQuery、treeQuery
| - - result         // 返回结果，如：addResult、queryResult
| - event          // 事件
| - - listener       // 事件监听器
| - external
| - - impl           // 外部依赖实现
| - service        // 业务服务服务
| - - impl           // 服务实现
- domain         // 领域层
| - converter      // 用于Entity和DO转换
| - entity         // 领域实体类，代表一个有状态的具体的事物
| - external       // 外部依赖
| - repository     // 仓库，用于处理业务语言描述的持久化操作
| - service        // 领域服务
| - types          // 领域原语
- infrastructure // 基础层
| - config         // 配置
| - constant       // 常量
| - enums          // 枚举
| - mapper         // 数据库操作
| - persistence    // 持久化对象
| - util           // 工具类
- interfaces     // 接口层
| - web            // 网页API
| - - rest           // rest接口
| - - ws             // webservice接口
| - mobile         // 移动端API
  #+end_src

* 领域模型
** 分层架构
  DDD的分层架构如图：从上到下依次是：用户接口层、应用层、领域层和基础层。

  [[file:ddd_layer.jpg]]

** 服务的调用
  微服务的服务调用包括三类主要场景：微服务内跨层服务调用，微服务之间服务调用和领域事件驱动。

  [[file:ddd_invoke.png]]

** 数据概念

   - VO（View Object）:: 视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。
   - DTO（Data Transfer Object）:: 数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，
	 但在这里，我泛指用于展示层与服务层之间的数据传输对象。
   - DO（Domain Object）:: 领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。
   - PO（Persistent Object）:: 持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。

微服务各层数据对象的职责和转换过程：

[[file:ddd_valobj.png]]
