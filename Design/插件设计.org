#+TITLE: 插件系统的设计
* 架构
1. 主程序如果希望自身的功能可以被扩展，其需要：
   + 提供一组服务 (Service Interface)。其提供（约束）了插件对主体能力可控制的边界。服务定义的越精细，插件控制的粒度越小，能力越大，但耦合度和复杂度也越高。
   + 定义一种扩展契约 (Plug-In Interface)，其描述了插件应该如何设计以便于主程序发现。并通过插件管理模块 (Plug-In Manager) 来发现、维护插件。
2. 插件通过实现主程序规定的扩展契约（通常是一个接口），标明自己的身份，并接收来自主程序的事件响应。
通过调动主程序提供的服务，实现和主程序的交互。这一过程，通常都是被主程序以 SDK (Software Development Kit) 的形式封装。

[./plugin.jpg]
* 文档
+ [[https://en.wikipedia.org/wiki/Plug-in_(computing)][Plug-in]]
